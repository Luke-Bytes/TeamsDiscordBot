generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Season {
  id        String    @id @default(uuid()) @map("_id")
  number    Int       @unique
  name      String?
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)

  games              Game[]
  gameParticipations GameParticipation[]
  eloHistories       EloHistory[]
  playerStats        PlayerStats[]
}

model PlayerStats {
  id       String  @id @default(uuid()) @map("_id")
  playerId String
  player   Player? @relation(fields: [playerId], references: [id])

  seasonId String
  season   Season @relation(fields: [seasonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  elo                 Int @default(1000)
  wins                Int @default(0)
  losses              Int @default(0)
  winStreak           Int @default(0)
  loseStreak          Int @default(0)
  biggestWinStreak    Int @default(0)
  biggestLosingStreak Int @default(0)

  @@unique([playerId, seasonId])
}

model Player {
  id String @id @default(uuid()) @map("_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discordSnowflake String @unique

  minecraftAccounts       String[]
  primaryMinecraftAccount String?
  latestIGN               String?

  eloHistories EloHistory[]
  games        GameParticipation[]
  punishments  PlayerPunishment[]
  PlayerStats  PlayerStats[]
}

model Game {
  id       String  @id @default(uuid()) @map("_id")
  finished Boolean @default(false)

  startTime DateTime
  endTime   DateTime
  settings  GameSettings
  winner    Team?
  type      gameType?

  organiser String?
  host      String?

  participantsIGNs String[]

  eloHistories       EloHistory[]
  gameParticipations GameParticipation[]

  seasonId String
  season   Season @relation(fields: [seasonId], references: [id])
}

model GameParticipation {
  id String @id @default(uuid()) @map("_id")

  ignUsed String
  team    Team

  playerId String
  gameId   String
  player   Player @relation(fields: [playerId], references: [id])
  game     Game   @relation(fields: [gameId], references: [id])

  mvp     Boolean @default(false)
  captain Boolean @default(false)

  seasonId String
  season   Season @relation(fields: [seasonId], references: [id])

  @@unique([playerId, gameId])
}

model EloHistory {
  id       String @id @default(uuid()) @map("_id")
  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  createdAt DateTime @default(now())
  elo       Int

  gameId String
  game   Game   @relation(fields: [gameId], references: [id])

  seasonId String
  season   Season @relation(fields: [seasonId], references: [id])
}

type ModifierTypes {
  category String
  name     String
}

type BanList {
  RED  AnniClass[]
  BLUE AnniClass[]
}

type GameSettings {
  minerushing         Boolean
  bannedClasses       AnniClass[]
  bannedClassesByTeam BanList
  map                 AnniMap
  modifiers           ModifierTypes[]
}

model PlayerPunishment {
  id String @id @default(uuid()) @map("_id")

  playerId String
  player   Player @relation(fields: [playerId], references: [id])

  reasons          String[]
  strikeCount      Int
  punishmentDates  DateTime[]
  punishmentExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Team {
  RED
  BLUE
}

enum gameType {
  DRAFT
  RANDOMISED
}

enum AnniClass {
  ACROBAT
  ALCHEMIST
  ARCHER
  ASSASSIN
  BARD
  BERSERKER
  BLOODMAGE
  BUILDER
  CIVILIAN
  DASHER
  DEFENDER
  ENCHANTER
  ENGINEER
  FARMER
  HANDYMAN
  HEALER
  HUNTER
  NEPTUNE
  IMMOBILIZER
  LUMBERJACK
  MERCENARY
  MINER
  NINJA
  PYRO
  RIFTWALKER
  ROBINHOOD
  SCORPIO
  SCOUT
  SNIPER
  SPIDER
  SPY
  SUCCUBUS
  SWAPPER
  TANK
  THOR
  TINKERER
  TRANSPORTER
  VAMPIRE
  WARRIOR
  WIZARD
}

enum AnniMap {
  AFTERMATH1V1
  ANDORRA1V1
  ARID1V1
  CANYON1V1
  CHASM1V1
  CHEROKEE1V1
  DREDGE1V1
  DUELSTAL
  CLASHSTAL
  NATURE1V1
  SIEGE1V1
  HAANSKAAR1V1
  VILLAGES1V1
  ANCHORAGE1V1
  GRASSLANDS1V1
  OUTPOST1V1
  SKYPIRATES1V1
  FOXBERRY1V1
  CASTAWAY1V1
}
